{
  "_meta": {
    "instructions": "GPT: Use these rules when formatting or analyzing exercise entries. Each entry must include: id (e.g. 'H6.3'), title, subjects (array of strings), status (string: 'Not Started', 'In Progress', or 'Completed'). Your top priority is to track progress *by subject*. The id comes from the filename (e.g. 'H6.3_LageEmissieZone.java'), and title from the filename too. Analyze the content of the uploaded PDF to determine the most relevant course subjects. Use the chapter number in the id to support inference. All subject names must be standardized, capitalized, and meaningful (e.g. 'HashMaps', 'Recursion', 'Sorting Algorithms'). An exercise may include multiple subjects. Default status to 'Completed' unless told otherwise. Output valid JSON objects for copy-paste. Do not include comments or extra explanation in the JSON. When reporting progress, group entries by exercise and include a comma-separated summary of subjects under each exercise title. Clearly indicate the status.\n\nWhen the user uploads a PDF file, follow these steps:\n\n1. Extract the filename and use it to determine:\n   - id → everything before the first underscore (e.g. 'H6.1')\n   - title → everything after the underscore, with underscores removed and capitalization preserved (e.g. 'LageEmissieZone')\n\n2. Analyze the contents of the PDF:\n   - Identify programming concepts used in the assignment (e.g. class definitions, object storage, algorithms, file I/O, control flow).\n   - Infer subjects from those concepts using standardized labels defined in the _subjects glossary below.\n\n3. Construct a new JSON object using this structure:\n{\n  \"id\": \"H6.1\",\n  \"title\": \"LageEmissieZone\",\n  \"subjects\": [\"HashMaps\"],\n  \"status\": \"Completed\"\n}\n\n- Use 'Completed' as the default status unless told otherwise.\n- Output only the raw JSON block, with proper formatting and indentation. No extra text or comments."
  },
  "_subjects": [
    "Object-Oriented Programming",
    "Inheritance & Polymorphism",
    "Exception Handling",
    "Collections & Containers",
    "HashMaps",
    "HashSets",
    "Testing & Debugging",
    "Class Design Principles",
    "Access Control",
    "JavaDoc & Documentation",
    "Constants and Static Members",
    "Advanced Abstraction",
    "Error-Resilient Software",
    "String Processing",
    "Loops & Conditionals",
    "Simulation Design",
    "Randomness"
  ],
  "exercises": [
    {
      "id": "H6.1",
      "title": "LageEmissieZone",
      "subjects": ["Object-Oriented Programming", "HashMaps", "String Processing"],
      "status": "Completed"
    },
    {
      "id": "H6.2",
      "title": "BibliotheekMetHash",
      "subjects": ["Object-Oriented Programming", "HashMaps", "HashSets", "Collections"],
      "status": "Completed"
    },
    {
      "id": "H6.3",
      "title": "Vertaler",
      "subjects": ["hashmap", "collections", "random", "classes", "string processing"],
      "status": "Completed"
    },
    {
      "id": "H6.4",
      "title": "Database",
      "subjects": ["hashmap", "collections", "classes", "integrity constraints", "object references"],
      "status": "Completed"
    },
    {
      "id": "H8.1_Jas",
      "title": "Jas",
      "subjects": ["classes", "objects", "enums", "toString", "ArrayList", "main-method"],
      "status": "Completed"
    },
    {
      "id": "H8.2_KrokoLoko",
      "title": "Kroko Loko",
      "subjects": ["random", "simulation", "classes", "objects", "arrays", "console-output", "game-logic"],
      "status": "In progress"
    },
    {
      "id": "fop2-h09-watersportclub",
      "title": "Watersportclub met zeil- en motorboten",
      "subjects": ["inheritance", "overriding", "encapsulation", "polymorphism", "class design", "method implementation", "object interaction"],
      "status": "unstarted"
    }

  ]
}
